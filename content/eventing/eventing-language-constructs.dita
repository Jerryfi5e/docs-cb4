<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="eventing_language_constructs">
  
  <title>
    Eventing Language Constructs
  </title>
  
  <shortdesc>
    The Eventing framework is implemented in JavaScript. Some constructs have been removed, others added.
  </shortdesc>
  
  <body>
    
    <section>
      
      <title>
        Language Constructs Overview
      </title>
      
      <p>
        The Eventing framework is implemented in JavaScript. In general, functions inherit support 
        for most ECMAScript constructs by using Google v8 as the execution container. However, to 
        support ability to shard and scale function-execution automatically, some capabilities must 
        be removed. Additionally, to optimize language-utilization of the server environment, some new 
        constructs are included.
      </p>
      
    </section>
    
    <section>
      
      <title>
        Removed Language Features
      </title>
      
      <p>
        The following JavaScript features cannot be used.
      </p>
      
      <ul>
        
        <li>
          <p>
            <i>Global State</i>: Functions do not allow global variables. All state must be saved and 
            retrieved from persistence providers. In Couchbase Server 5.5, the only available persistence 
            provider is the KV provider: therefore, all global state is contained in the KV bucket(s) made 
            available to the function via bindings. This restriction is necessary in order to enable 
            function-logic to remain agnostic of rebalance.
          </p>
          
          <codeblock outputclass="language-javascript">var count = 0;                         // Not allowed - global variable.
function OnUpdate(doc, meta) {
  count++;
}</codeblock>
            
        <p>
          
        </p>
        </li>
        
        <li>
          <p>
            <i>Asynchrony</i>: Asynchrony &#8212; and in particular, 
            asynchronous callback  &#8212; can and often must retain access to 
            parent scope to be useful. This forms a node-specific, long-running 
            state that prevents the capture of entire long-running state in 
            persistence providers. Therefore, function handlers are restricted to 
            running as short-running, straight-line code, without sleeps and wakeups. 
            Limited asynchrony is added back via time observers (these are designed, 
            however, not to make the state node-specific).
          </p>
          
          <codeblock outputclass="language-javascript">function OnUpdate(doc, meta) {
  setTimeout(function(){}, 300);     // Not allowed - asynchronous flow.
}</codeblock>
          
          <p>
            
          </p>
          
        </li>
        
        <li>
          <p>
            <i>Browser and other Extensions</i>: As functions do not execute in context 
            of a browser, the extensions browsers add to the core language, such as 
            window methods and DOM events, are not available. A limited subset is added 
            back (such as Function Timers in lieu of setTimeout, and curl calls instad 
            of XHR).
          </p>
          
          <codeblock outputclass="language-javascript">function OnUpdate(doc, meta) {
  var rpc = window.XMLHttpRequest();  // Not allowed - browser extension.
}</codeblock>
        </li>
       
      </ul>
    </section>
    
    <section>
      
      <title>
        Added Language Features
      </title>
      
      <p>
        
      </p>
    </section>
   
  </body>
</topic>
